#!/usr/bin/env node

'use strict';
const { execSync } = require('child_process');
const { readFileSync } = require('fs');

// Check version type
const params = process.argv.slice(2);
let type = params[0] || null;

if (!type) {
  console.log('No version type specified: "patch" used');
  type = 'patch';
}
if (type !== 'major' && type !== 'minor' && type !== 'patch' ) {
  error('Invalid version type. Please provide a value (major | minor | patch)');
}

// Check uncommited files
const status = execSync('git status --porcelain', { encoding: 'utf8' });
if (status !== '') {
  error('Working directory not clean. Please commit your files before deploy.');
}

// Update version
let version = execSync(`npm version --no-git-tag-version ${type}`, { encoding: 'utf8' });
version = version.replace('v', '').trim();

// Check changelog update
const changelog = readFileSync(`${__dirname}/CHANGELOG.md`, 'utf8');
const search = (/^<a name="(\d.\d.\d)"><\/a>\n/g).exec(changelog);
const changeVersion = search && search.length >= 2 ? search[1] : null;

if (changeVersion !== version) {
  reset();
  error('CHANGELOG not updated. Add the new version before deploy it.');
}

// Execute npm publish
try {
  execSync('npm publish', { stdio: 'inherit' });
} catch (e) {
  reset();
  error('Publishing failed, operation aborted.');
}

// Push to remote git
let git = 'git pull && ';
git += 'git add . && ';
git += `git commit -m "Released ${version}" && `;
git += `git tag "${version}" && `;
git += 'git push && ';
git += 'git push --tags';
execSync(git, { stdio: 'inherit' });

// Functions
function error(message) {
  console.error('\x1b[41m%s\x1b[0m', message, '\n');
  process.exit(1);
}

function reset() {
  execSync('git checkout HEAD -- package.json package-lock.json');
}
